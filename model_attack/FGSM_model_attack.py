import torch
import torch.nn.functional as F
from prepare_models import model_list
from prepare_datasets import min_test_loader


device = 'cuda' if torch.cuda.is_available() else 'cpu'
def fgsm_attack(models, images, labels, epsilon):
    """
    FGSM Attack on a model cluster.
    
    Arguments:
    - models: A list of models to attack.
    - images: The input images (batch of samples).
    - labels: The true labels corresponding to the images.
    - epsilon: The maximum perturbation allowed (for L_infinity norm).
    
    Returns:
    - perturbed_images: The adversarial images generated by the attack.
    - outputs: A list of outputs from each model in the cluster.
    - final_output: The combined output (average) from the model cluster.
    """
    
    # Ensure all models are in evaluation mode
    for model in models:
        model.eval()
    
    # Make a copy of the images and require gradients
    perturbed_images = images.clone().detach().to(device).requires_grad_(True)

    # Calculate the loss for the first model to get gradients
    outputs = models[0](perturbed_images)
    loss = F.cross_entropy(outputs, labels)
    
    # Compute gradients
    model.zero_grad()
    loss.backward()

    # Generate the perturbation using the sign of the gradients
    perturbation = epsilon * perturbed_images.grad.sign()

    # Apply the perturbation to the images
    perturbed_images = perturbed_images + perturbation

    # Clip the perturbed images to ensure they remain in a valid range
    perturbed_images = torch.clamp(perturbed_images, 0, 1)

    # Collect the outputs from all models
    model_outputs = []
    for model in models:
        output = model(perturbed_images)
        model_outputs.append(output)
    
    # Compute the final output by averaging the outputs of the models
    final_output = torch.mean(torch.stack(model_outputs), dim=0)

    return perturbed_images, model_outputs, final_output

def calculate_accuracy(outputs, labels):
    """
    Calculate the accuracy of the model's predictions.
    """
    _, predicted = torch.max(outputs, 1)  # 获取每个样本的最大预测值的索引
    correct = (predicted == labels).sum().item()  # 计算正确预测的数量
    accuracy = correct / labels.size(0)  # 精确度 = 正确预测 / 样本总数
    return accuracy
# Example usage:
# Assuming 'model_list' is a list of your model instances, and 'images' and 'labels' are your input batch
images, labels = next(iter(min_test_loader))
epsilon = 0.05  # Maximum perturbation
perturbed_images, model_outputs, final_output = fgsm_attack(models=model_list, images=images, labels=labels, epsilon=epsilon)
final_accuracy = calculate_accuracy(outputs=final_output, labels=labels)


